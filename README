
==================================================================							

Author: 

Abhishek Chowdhry
2nd Year, B. Tech COmputer Science and Engineering, IIT Ropar
Email: abhishek.chowdhry97@gmail.com
Github: github.com/abhishek1007 

==================================================================

Tasks: 


1) Implement an ordered map with height balanced binary search tree (AVL tree).
The ordered map should contain the following functions in its interface:-

1. firstEntry(k): Return an iterator to the entry with smallest key value; if the map is empty,
it returns end.
2. lastEntry(k): ​ Return an iterator to the entry with largest key value; if the map is empty, it
returns end.
3. ceilingEntry(k): Return an iterator to the entry with the least key value greater than or
equal to k; if there is no such entry, it returns end.4. floorEntry(k): Return an iterator to the entry with the greatest key value less than or
equal to k; if there is no such entry, it returns end.
5. lowerEntry(k): ​ Return an iterator to the entry with the greatest key value less than k; if
there is no such entry, it returns end.
6. higherEntry(k): Return an iterator to the entry with the least key value greater than k; if
there is no such entry, it returns end.
7. size():​ Return the number of entries in M.
8. empty():​ Return true if M is empty and false otherwise.
9. find(k): ​ If M contains an entry e=(k,v),with key equal to k,then return an iterator p
referring to this entry, and otherwise return the special iterator end.
10. put(k,v)​ : If M does not have an entry with key equal to k, then add entry (k,v) to M, and
otherwise, replace the value field of this entry with v; return an iterator to the
inserted/modified entry.
11. erase(k): Remove from M the entry with key equal to k; an error condition occurs if M
has no such entry.
12. erase(p): ​ Remove from M the entry referenced by iterator p; an error condition occurs if
p points to the end sentinel.


2) Read a sequence of n space separated integers from a file and insert into
the ordered map implementation of the previous task. Now, for a given target sum,
write a function that returns true if there is a pair with sum equals to target sum,
otherwise returns false. 

3) Implement a Red Black tree. Along with ​ insert(k,v)​ , ​ remove(k)​ , and ​ search(k)​ ,
include the following functions:
a.​ ​ Delete a node from the red black tree.
b.​ ​ Count the number of leaves in a tree.
c.​ ​ Return the height of a tree.
d.​ ​ Return a list of all keys in a tree between a and b.

==================================================================

This file explains how to run the simulation on linux:
The code for the given problem is written in C++.

How to Compile the Program - 

1. The Tasks(1, 2 and 3) are done using seperate files in separate folders.

2. Use the cd command to navigate to the correct path and then go to the question directory.

3. Type make and then type ./finalq1  or ./finalq2  or ./finalq3 (as per the required question) to run the code. 

How to Run the Program - 

In case of the first and the third program a menu will be displayed. Follow the instructions and run the code accordingly.

While in case of 2nd question the input will be read from the given file. Enter the required target sum to get the answer.



